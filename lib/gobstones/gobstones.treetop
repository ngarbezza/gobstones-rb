grammar Gobstones

  rule gexp
    bexp
  end

  rule bexp
    left:bterm space* '||' space* right:bexp <OrExprNode> / bterm
  end

  rule bterm
    left:bfact space* '&&' space* right:bterm <AndExprNode> / bfact
  end

  rule bfact
    'not' space+ exp:batom <NotExprNode> / batom
  end

  rule batom
    left:nexp space* op:rop space* right:nexp <RopExprNode> / nexp
  end

  rule rop
    '==' / '/=' / '<=' / '>=' / '<' / '>'
  end

  rule nexp
    left:nterm
    sub_exps:(space* op:nop space* right:nterm)*
    <NopExprNode>
  end

  rule nop
    '+' / '-'
  end

  rule nterm
    left:nfactH
    sub_exps:(space* '*' space* right:nfactH)*
    <MulExprNode>
  end

  rule nfactH
    left:nfactL space+ op:mop space+ right:nfactL <DivModExprNode> / nfactL
  end

  rule mop
    'div' / 'mod'
  end

  rule nfactL
    left:natom sub_exps:(space* '^' space* right:natom)* <PowExprNode>
  end

  rule natom
    literal / type_bound_func / primitive_func /
    paren_expr / func_call / var_name
  end

  rule literal
    number / boolean / color / direction
  end

  rule number
    '-'? [1-9] [0-9]* <IntegerLiteral>
  end

  rule boolean
    ('True' / 'False') <BooleanLiteral>
  end

  rule color
    ('Azul' / 'Negro' / 'Rojo' / 'Verde') <ColorLiteral>
  end

  rule direction
    ('Norte' / 'Este' / 'Sur' / 'Oeste') <DirectionLiteral>
  end

  rule type_bound_func
    bool_type_bound_func / color_type_bound_func / direction_type_bound_func
  end

  rule bool_type_bound_func
    'minBool()' <MinBoolFuncNode> / 'maxBool()' <MaxBoolFuncNode>
  end

  rule color_type_bound_func
    'minColor()' <MinColorFuncNode> / 'maxColor()' <MaxColorFuncNode>
  end

  rule direction_type_bound_func
    'minDir()' <MinDirFuncNode> / 'maxDir()' <MaxDirFuncNode>
  end

  rule func_call
    func_name:lower_id &{ |id| id[0].is_not_reserved }
    space* args:gexp_tuple <FuncCallNode>
  end

  rule gexp_tuple
    '(' space* exps:gexps? space* ')' <TupleExprNode>
  end

  rule gexps
    ((exp:gexp space* ',' space* exps:gexps) / gexp) <GexpsNode>
  end

  rule var_name
    lower_id &{ |id| id[0].is_not_reserved } <VarNameNode>
  end

  rule lower_id
    [a-z] char* {
      def is_not_reserved
        !Gobstones::Lang::RESERVED_IDS.include? text_value
      end
    }
  end

  rule char
    [a-z] / [A-Z] / [0-9] / "'" / '_'
  end

  rule primitive_func
    nro_bolitas_func /
    hay_bolitas_func /
    puede_mover_func /
    siguiente_func /
    previo_func /
    opuesto_func
  end

  rule nro_bolitas_func
    'nroBolitas(' space* arg:gexp space* ')' <NroBolitasFuncNode>
  end

  rule hay_bolitas_func
    'hayBolitas(' space* arg:gexp space* ')' <HayBolitasFuncNode>
  end

  rule puede_mover_func
    'puedeMover(' space* arg:gexp space* ')' <PuedeMoverFuncNode>
  end

  rule siguiente_func
    'siguiente(' space* arg:gexp space* ')' <SiguienteFuncNode>
  end

  rule previo_func
    'previo(' space* arg:gexp space* ')' <PrevioFuncNode>
  end

  rule opuesto_func
    'opuesto(' space* arg:gexp space* ')' <OpuestoFuncNode>
  end

  rule paren_expr
    '(' space* exp:gexp space* ')' <ParenthesesExprNode>
  end

  rule space
    [\s]
  end

end
