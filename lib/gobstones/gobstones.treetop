grammar Gobstones

  rule atom_expr
    literal / type_bound_func / primitive_func / var_name
  end

  rule literal
    number / boolean / color / direction
  end

  rule number
    '-'? [1-9] [0-9]* <IntegerLiteral>
  end

  rule boolean
    ('True' / 'False') <BooleanLiteral>
  end

  rule color
    ('Azul' / 'Negro' / 'Rojo' / 'Verde') <ColorLiteral>
  end

  rule direction
    ('Norte' / 'Este' / 'Sur' / 'Oeste') <DirectionLiteral>
  end

  rule type_bound_func
    bool_type_bound_func / color_type_bound_func / direction_type_bound_func
  end

  rule bool_type_bound_func
    'minBool()' <MinBoolFuncNode> / 'maxBool()' <MaxBoolFuncNode>
  end

  rule color_type_bound_func
    'minColor()' <MinColorFuncNode> / 'maxColor()' <MaxColorFuncNode>
  end

  rule direction_type_bound_func
    'minDir()' <MinDirFuncNode> / 'maxDir()' <MaxDirFuncNode>
  end

  rule var_name
    lower_id &{ |id| id[0].is_not_reserved } <VarNameNode>
  end

  rule lower_id
    [a-z] char* {
      def is_not_reserved
        !Gobstones::RESERVED_IDS.include? text_value
      end
    }
  end

  rule char
    [a-z] / [A-Z] / [0-9] / "'" / '_'
  end

  rule primitive_func
    nro_bolitas_func / hay_bolitas_func / puede_mover_func
  end

  rule nro_bolitas_func
    'nroBolitas(' space* atom_expr space* ')' <NroBolitasFuncNode>
  end

  rule hay_bolitas_func
    'hayBolitas(' space* atom_expr space* ')' <HayBolitasFuncNode>
  end

  rule puede_mover_func
    'puedeMover(' space* atom_expr space* ')' <PuedeMoverFuncNode>
  end

  rule space
    [\s]
  end

end
